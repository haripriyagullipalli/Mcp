import fetch from "node-fetch";
import * as cheerio from "cheerio";
import { Guideline, GuidelinesMap } from "./types";
import fs from "fs";
import path from "path";

require("dotenv").config({ path: path.resolve(__dirname, "../../.env") });

console.error("üîß Environment loaded - Base URL:", process.env.CONFLUENCE_BASE_URL);

const BASE_URL = process.env.CONFLUENCE_BASE_URL;
const EMAIL = process.env.CONFLUENCE_EMAIL!;
const API_TOKEN = process.env.CONFLUENCE_API_TOKEN!;
const MAIN_PAGE_ID = process.env.CONFLUENCE_MAIN_PAGE_ID!;
// if (!MAIN_PAGE_ID) throw new Error("Environment variable MAIN_PAGE_ID is not set.");

// Helper: returns the authorization header
function getAuthHeader() {
  const creds = Buffer.from(`${EMAIL}:${API_TOKEN}`).toString("base64");
  return { Authorization: `Basic ${creds}` };
}

// Fetch a Confluence page by ID
async function fetchPageContent(pageId: string): Promise<string> {
  const url = `${BASE_URL}/rest/api/content/${pageId}?expand=body.view`;
  const res = await fetch(url, { headers: getAuthHeader() });
  if (!res.ok) {
    const errorText = await res.text();
    throw new Error(`Failed to fetch page ${pageId}: ${res.status} ${res.statusText} - ${errorText}`);
  }
  const data = (await res.json()) as { body: { view: { value: string } } };
  return data.body.view.value; // HTML string
}

// Object to store all guidelines
export const guidelines: GuidelinesMap = {};

// Helper: fetch child page IDs for a given page
async function fetchChildPageIds(pageId: string): Promise<string[]> {
  const url = `${BASE_URL}/rest/api/content/${pageId}/child/page`;
  const res = await fetch(url, { headers: getAuthHeader() });
  if (!res.ok) {
    const errorText = await res.text();
    throw new Error(`Failed to fetch child pages for ${pageId}: ${res.status} ${res.statusText} - ${errorText}`);
  }
  const data: any = await res.json();
  if (!data.results) return [];
  return data.results.map((page: any) => page.id);
}

// Load comprehensive TBC guidelines from documentation
function loadComprehensiveTBCGuidelines(): GuidelinesMap {
  const comprehensive: GuidelinesMap = {};

  // 1. Backend Development Guidelines
  comprehensive["backend-comprehensive"] = {
    title: "Backend Development - Comprehensive Rules",
    text: `
PROGRAMMING LANGUAGE: C#/.NET with LTS versions only
FRAMEWORK: ASP.NET Core Web API exclusively
ARCHITECTURE: Clean Architecture (Domain ‚Üí Application ‚Üí Infrastructure ‚Üí Presentation)

PROJECT STRUCTURE:
‚úÖ Use .NET project templates
‚úÖ Implement Clean Architecture layers
‚úÖ Follow Domain-Driven Design principles

AUTHENTICATION & AUTHORIZATION:
‚úÖ Use JWT tokens for API authentication  
‚úÖ Implement role-based authorization
‚úÖ Use Azure AD/Identity Server integration

DATABASE ACCESS:
‚úÖ SQL Server as primary database
‚úÖ Entity Framework Core for data access
‚úÖ Use Repository + Unit of Work patterns
‚úÖ Implement database migrations
‚úÖ Use AsNoTracking() for read-only queries

TESTING:
‚úÖ Unit testing with xUnit framework
‚úÖ 80%+ code coverage requirement
‚úÖ Integration testing for APIs
‚úÖ SonarQube integration for quality gates

SECURITY:
‚úÖ Follow OWASP security guidelines
‚úÖ Implement input validation
‚úÖ Use parameterized queries
‚úÖ Sanitize all user inputs
‚úÖ Regular NuGet vulnerability checks
`,
    url: "internal://backend-comprehensive"
  };

  // 2. API Design - Complete Rules
  comprehensive["api-design-complete"] = {
    title: "API Design - Complete Rules",
    text: `
URI NAMING CONVENTIONS:
‚úÖ Use lowercase letters only
‚úÖ Use hyphens (-) instead of underscores (_)  
‚úÖ Use plural nouns for collections
‚úÖ Use hierarchical structure: /api/v1/users/{id}/orders

HTTP METHODS:
‚úÖ GET: Retrieve data (idempotent)
‚úÖ POST: Create new resources
‚úÖ PUT: Update entire resource (idempotent)  
‚úÖ PATCH: Partial updates
‚úÖ DELETE: Remove resources (idempotent)

PAYLOAD MODELING:
‚úÖ Use consistent JSON formats
‚úÖ camelCase for property names
‚úÖ Include proper validation
‚úÖ Use DTOs, never return entities directly

ERROR HANDLING:
‚úÖ Use appropriate HTTP status codes
‚úÖ Provide meaningful error messages
‚úÖ Include error codes for programmatic handling
‚úÖ Consistent error format across APIs

API VERSIONING:
‚úÖ Use versioned endpoints: /api/v1/, /api/v2/
‚úÖ Maintain backward compatibility
‚úÖ Proper deprecation strategies

HTTP STATUS CODES:
‚úÖ 200: OK (successful GET, PUT, PATCH)
‚úÖ 201: Created (successful POST)
‚úÖ 204: No Content (successful DELETE)
‚úÖ 400: Bad Request (validation errors)
‚úÖ 401: Unauthorized (authentication required)
‚úÖ 403: Forbidden (insufficient permissions)
‚úÖ 404: Not Found (resource doesn't exist)
‚úÖ 500: Internal Server Error (server issues)
`,
    url: "internal://api-design-complete"
  };

  // 3. Logging - Comprehensive Rules  
  comprehensive["logging-comprehensive"] = {
    title: "Logging - Comprehensive Standards",
    text: `
LOGGING FRAMEWORK: Serilog preferred, NLog acceptable
DEPENDENCY INJECTION: Use ILogger<T> interface always

STRUCTURED LOGGING:
‚úÖ Use structured logging with parameters
‚úÖ Example: _logger.LogInformation("Processing {UserId} for {ActionType}", userId, actionType)
‚ùå Avoid: _logger.LogInformation("Processing " + userId + " for " + actionType)

LOG LEVELS:
‚úÖ Trace: Detailed diagnostic information
‚úÖ Debug: Development-time diagnostic information  
‚úÖ Information: General application flow
‚úÖ Warning: Unexpected situations that don't stop execution
‚úÖ Error: Error events that allow application to continue
‚úÖ Critical: Fatal errors that may cause application termination

SENSITIVE DATA:
‚úÖ Use TBC.Common.Serilog for automatic masking
‚úÖ Never log passwords, tokens, or PII directly
‚úÖ Implement log sanitization for sensitive fields

CONSOLE OUTPUT:
‚ùå Never use Console.WriteLine() in production code
‚úÖ Always use ILogger<T> interface for all logging needs

PERFORMANCE:
‚úÖ Use conditional logging for expensive operations
‚úÖ Implement proper log levels to control verbosity
`,
    url: "internal://logging-comprehensive"
  };

  // 4. Entity Framework - Complete Guidelines
  comprehensive["ef-comprehensive"] = {
    title: "Entity Framework - Complete Guidelines", 
    text: `
ORM: Entity Framework Core exclusively
DATABASE: SQL Server 2019+ as primary database

PERFORMANCE OPTIMIZATION:
‚úÖ Use AsNoTracking() for read-only queries
‚úÖ Use Select() projections to fetch specific fields
‚úÖ Implement proper indexing strategies
‚úÖ Use async methods: ToListAsync(), SaveChangesAsync()

REPOSITORY PATTERN:
‚úÖ Use Repository + Unit of Work patterns
‚úÖ Use TBC.Common.Repository libraries
‚ùå Avoid direct DbContext usage in controllers
‚úÖ Implement generic repository interfaces

MIGRATIONS:
‚úÖ Use code-first migrations
‚úÖ Proper migration naming conventions
‚úÖ Test migrations on staging before production

QUERY OPTIMIZATION:
‚úÖ Use Include() for eager loading when needed
‚úÖ Avoid N+1 query problems
‚úÖ Use Split Queries for complex includes
‚úÖ Implement query result caching where appropriate

DATA VALIDATION:
‚úÖ Use Data Annotations for basic validation
‚úÖ Implement Fluent Validation for complex rules
‚úÖ Server-side validation always required
`,
    url: "internal://ef-comprehensive"
  };

  // 5. Security - Complete Guidelines
  comprehensive["security-comprehensive"] = {
    title: "Security - Complete Guidelines",
    text: `
OWASP COMPLIANCE:
‚úÖ Follow OWASP Top 10 security risks
‚úÖ Implement proper input validation
‚úÖ Use parameterized queries (prevent SQL injection)
‚úÖ Implement proper authentication and authorization

INPUT VALIDATION:
‚úÖ Validate all user inputs server-side
‚úÖ Use whitelist approach for validation
‚úÖ Sanitize inputs before processing
‚úÖ Implement proper error messages without revealing system details

AUTHENTICATION:
‚úÖ Use JWT tokens for API authentication
‚úÖ Implement proper token expiration
‚úÖ Use secure token storage mechanisms
‚úÖ Implement refresh token patterns

AUTHORIZATION:
‚úÖ Use role-based access control (RBAC)
‚úÖ Implement claim-based authorization
‚úÖ Apply principle of least privilege
‚úÖ Validate permissions at multiple layers

DATA PROTECTION:
‚úÖ Use HTTPS for all communications
‚úÖ Encrypt sensitive data at rest
‚úÖ Implement proper key management
‚úÖ Use secure configuration management
`,
    url: "internal://security-comprehensive"
  };

  // 6. Testing - Complete Standards
  comprehensive["testing-comprehensive"] = {
    title: "Testing - Complete TBC Standards",
    text: `
TESTING FRAMEWORK: xUnit for .NET exclusively
CODE COVERAGE: Minimum 80% coverage required
TESTING STRATEGY: Unit ‚Üí Integration ‚Üí E2E testing pyramid

UNIT TESTING:
‚úÖ Test all business logic methods
‚úÖ Use AAA pattern (Arrange, Act, Assert)
‚úÖ Mock external dependencies (IRepository, ILogger, etc.)
‚úÖ Test both positive and negative scenarios
‚úÖ Use meaningful test names: Should_ReturnError_When_UserNotFound()

INTEGRATION TESTING:
‚úÖ Test API endpoints with TestServer
‚úÖ Test database operations with test database
‚úÖ Test external service integrations
‚úÖ Use WebApplicationFactory for API testing

MOCKING:
‚úÖ Use Moq library for mocking
‚úÖ Mock ILogger<T>, IRepository, external services
‚úÖ Verify method calls and parameters
‚úÖ Setup return values for different scenarios

SONARQUBE INTEGRATION:
‚úÖ Quality gates must pass before merge
‚úÖ No code smells, bugs, or vulnerabilities
‚úÖ Maintain code coverage thresholds
`,
    url: "internal://testing-comprehensive"
  };

  // 7. Project Structure & Architecture
  comprehensive["architecture-comprehensive"] = {
    title: "Clean Architecture & Project Structure",
    text: `
ARCHITECTURE PATTERN: Clean Architecture mandatory
LAYERS: Domain ‚Üí Application ‚Üí Infrastructure ‚Üí Presentation

PROJECT STRUCTURE:
‚úÖ Domain Layer: Entities, Value Objects, Domain Services
‚úÖ Application Layer: Use Cases, DTOs, Interfaces
‚úÖ Infrastructure Layer: Data Access, External Services
‚úÖ Presentation Layer: Controllers, ViewModels

DEPENDENCY INJECTION:
‚úÖ Use .NET Core built-in IoC container
‚úÖ Register services with appropriate lifetimes
‚úÖ Use interfaces for all dependencies
‚úÖ Constructor injection preferred

DOMAIN-DRIVEN DESIGN:
‚úÖ Rich domain models with behavior
‚úÖ Aggregate roots for consistency boundaries
‚úÖ Domain events for cross-cutting concerns
‚úÖ Value objects for primitive obsession

CQRS PATTERN:
‚úÖ Separate read and write models
‚úÖ Use MediatR for command/query handling
‚úÖ Implement command and query handlers
‚úÖ Read models optimized for queries
`,
    url: "internal://architecture-comprehensive"
  };

  // 8. Background Tasks & Jobs
  comprehensive["background-tasks"] = {
    title: "Background Tasks & Job Processing",
    text: `
BACKGROUND SERVICE: Use TBC.Common.BackgroundTasks
JOB SCHEDULING: Hangfire or Quartz.NET integration
ASYNC PROCESSING: For long-running operations

IMPLEMENTATION:
‚úÖ Use IHostedService for background services
‚úÖ Implement proper cancellation token handling
‚úÖ Use TBC.Common.BackgroundTasks library
‚úÖ Queue jobs for async processing

ERROR HANDLING:
‚úÖ Implement retry mechanisms
‚úÖ Dead letter queue for failed jobs
‚úÖ Proper logging of job execution
‚úÖ Monitor job performance and health

PATTERNS:
‚úÖ Fire-and-forget for non-critical tasks
‚úÖ Delayed jobs for scheduled operations
‚úÖ Recurring jobs for maintenance tasks
‚úÖ Batch jobs for bulk operations
`,
    url: "internal://background-tasks"
  };

  // 9. File Storage & Management
  comprehensive["file-storage"] = {
    title: "File Storage & Management Guidelines",
    text: `
CLOUD STORAGE: Azure Blob Storage preferred
FILE VALIDATION: Mandatory for all uploads
VIRUS SCANNING: Required for uploaded files

FILE UPLOAD:
‚úÖ Validate file types and sizes
‚úÖ Generate unique file names
‚úÖ Use secure file storage paths
‚úÖ Implement virus scanning

SECURITY:
‚úÖ Validate file extensions against whitelist
‚úÖ Check file content, not just extension
‚úÖ Limit file sizes per upload
‚úÖ Scan for malware before storage

PERFORMANCE:
‚úÖ Use streaming for large files
‚úÖ Implement progress tracking
‚úÖ Compress files when appropriate
‚úÖ Use CDN for file distribution
`,
    url: "internal://file-storage"
  };

  // 10. Messaging & Integration
  comprehensive["messaging-comprehensive"] = {
    title: "Messaging & Integration Patterns",
    text: `
MESSAGE BROKERS: RabbitMQ or TIBCO EMS
INTEGRATION PATTERNS: Event-driven architecture
ASYNC MESSAGING: For microservice communication

IMPLEMENTATION:
‚úÖ Use message queues for decoupling
‚úÖ Implement event sourcing patterns
‚úÖ Use publish-subscribe for events
‚úÖ Implement saga patterns for distributed transactions

MESSAGE DESIGN:
‚úÖ Include correlation IDs
‚úÖ Use versioned message schemas
‚úÖ Include timestamp and source information
‚úÖ Implement idempotent message handlers

ERROR HANDLING:
‚úÖ Dead letter queues for failed messages
‚úÖ Retry mechanisms with exponential backoff
‚úÖ Circuit breaker patterns
‚úÖ Message deduplication
`,
    url: "internal://messaging-comprehensive"
  };

  // 11. API Documentation & Contracts
  comprehensive["api-documentation"] = {
    title: "API Documentation & Contract Standards",
    text: `
DOCUMENTATION: OpenAPI/Swagger mandatory
CONTRACT-FIRST: Define API contracts before implementation
VERSIONING: Document all API versions

SWAGGER/OPENAPI:
‚úÖ Complete API documentation required
‚úÖ Include request/response examples
‚úÖ Document all HTTP status codes
‚úÖ Include authentication requirements

API CONTRACTS:
‚úÖ Define clear request/response DTOs
‚úÖ Include validation rules in documentation
‚úÖ Specify required vs optional fields
‚úÖ Document error response formats

EXAMPLES:
‚úÖ Provide realistic request examples
‚úÖ Include common error scenarios
‚úÖ Document authentication flows
‚úÖ Include rate limiting information
`,
    url: "internal://api-documentation"
  };

  // 12. Performance & Optimization
  comprehensive["performance-optimization"] = {
    title: "Performance & Optimization Guidelines",
    text: `
DATABASE OPTIMIZATION: Query performance critical
CACHING: Redis for distributed caching
ASYNC PATTERNS: Use async/await throughout

DATABASE PERFORMANCE:
‚úÖ Use AsNoTracking() for read-only queries
‚úÖ Implement proper indexing strategies
‚úÖ Use Select() projections to limit data
‚úÖ Batch operations when possible

CACHING STRATEGIES:
‚úÖ Cache frequently accessed data
‚úÖ Use Redis for distributed caching
‚úÖ Implement cache-aside pattern
‚úÖ Set appropriate expiration times

API PERFORMANCE:
‚úÖ Implement pagination for large datasets
‚úÖ Use compression for responses
‚úÖ Implement rate limiting
‚úÖ Monitor response times and optimize
`,
    url: "internal://performance-optimization"
  };

  // 13. Monitoring & Observability
  comprehensive["monitoring-observability"] = {
    title: "Monitoring & Observability Standards",
    text: `
TELEMETRY: Application Insights integration
HEALTH CHECKS: Mandatory for all services
METRICS: Custom metrics for business operations

MONITORING:
‚úÖ Implement health check endpoints
‚úÖ Use Application Insights for telemetry
‚úÖ Monitor application performance
‚úÖ Set up alerts for critical issues

LOGGING INTEGRATION:
‚úÖ Structured logging with Serilog
‚úÖ Log correlation IDs for tracing
‚úÖ Use Graylog for centralized logging
‚úÖ Include performance metrics in logs

METRICS:
‚úÖ Track business-relevant metrics
‚úÖ Monitor API response times
‚úÖ Track error rates and patterns
‚úÖ Implement custom counters and gauges
`,
    url: "internal://monitoring-observability"
  };

  // 14. Deployment & DevOps
  comprehensive["deployment-devops"] = {
    title: "Deployment & DevOps Standards",
    text: `
CI/CD: Azure DevOps pipelines mandatory
DEPLOYMENT: Blue-green deployment strategy
CONFIGURATION: Environment-specific configs

BUILD PIPELINE:
‚úÖ Automated builds on code commit
‚úÖ Run all tests in pipeline
‚úÖ SonarQube quality gates
‚úÖ Security vulnerability scanning

DEPLOYMENT STRATEGY:
‚úÖ Blue-green deployments for zero downtime
‚úÖ Database migration automation
‚úÖ Rollback procedures documented
‚úÖ Environment-specific configurations

INFRASTRUCTURE:
‚úÖ Infrastructure as Code (Terraform/ARM)
‚úÖ Container deployment with Docker
‚úÖ Kubernetes orchestration where applicable
‚úÖ Load balancer configuration
`,
    url: "internal://deployment-devops"
  };

  return comprehensive;
}

// Load only guideline pages linked from the main page
export async function loadGuidelines(): Promise<GuidelinesMap> {
  console.error(`üîÑ Loading guidelines from page ID: ${MAIN_PAGE_ID}`);
  const html = await fetchPageContent(MAIN_PAGE_ID!);
  const $ = cheerio.load(html);

  const urls: string[] = [];
  $("a").each((_, el) => {
    const href = $(el).attr("href");
    if (href && href.includes("/pages/")) urls.push(href);
  });
  
  console.error(`üîó Found ${urls.length} guideline page links`);

  for (const url of urls) {
    const match = url.match(/\/pages\/(\d+)/);
    if (!match) continue;

    const pageId = match[1];
    try {
      const contentHtml = await fetchPageContent(pageId);
      const $$ = cheerio.load(contentHtml);
      const title = $$("h1").first().text() || url;
      let text = $$.text().replace(/\s+/g, " ").trim();

      // Find and fetch content of any linked guideline pages within this page
      const subUrls: string[] = [];
      $$('a').each((_, el) => {
        const href = $$(el).attr('href');
        if (href && href.includes('/pages/')) subUrls.push(href);
      });

      // Fetch all sub guideline pages in parallel
      const subPagePromises = subUrls.map(async (subUrl) => {
        const subMatch = subUrl.match(/\/pages\/(\d+)/);
        if (!subMatch) return '';
        const subPageId = subMatch[1];
        try {
          const subContentHtml = await fetchPageContent(subPageId);
          const $$$ = cheerio.load(subContentHtml);
          const subTitle = $$$('h1').first().text() || subUrl;
          const subText = $$$.text().replace(/\s+/g, ' ').trim();
          return `\n\n---\nIncluded from: ${subTitle}\n${subText}\nURL: ${subUrl}`;
        } catch (err) {
          console.error(`‚ùå Failed to load included page ${subUrl}:`, err);
          return '';
        }
      }); 
      const subPageContents = await Promise.all(subPagePromises);
      text += subPageContents.join('');

      guidelines[pageId] = { title, text: `${text}\nURL: ${url}`, url };
      console.error(`‚úÖ Loaded guideline: ${title}`);
    } catch (err) {
      console.error(`‚ùå Failed to load ${url}:`, err);
    }
  }

  // Add comprehensive TBC guidelines from documentation
  
  // Load comprehensive TBC rules from local documentation
  const comprehensiveGuidelines = loadComprehensiveTBCGuidelines();
  Object.assign(guidelines, comprehensiveGuidelines);

  // Add critical API naming guideline
  guidelines["api-naming-critical"] = {
    title: "CRITICAL: API Endpoint Naming Standard",
    text: `MANDATORY TBC BANK STANDARD: API endpoints MUST use kebab-case (hyphens), NOT underscores.

‚úÖ CORRECT EXAMPLES:
- /api/v1/user-profiles
- /api/v1/account-transactions  
- /api/v1/payment-methods
- /api/v1/loan-applications

‚ùå WRONG EXAMPLES:
- /api/v1/user_profiles (underscores not allowed)
- /api/v1/account_transactions (underscores not allowed)
- /api/v1/payment_methods (underscores not allowed)

This is a mandatory organizational standard that must be followed in ALL API endpoints.`,
    url: "internal://api-naming-standard"
  };

  console.error(`üìã Total guidelines loaded: ${Object.keys(guidelines).length}`);
  return guidelines;
}

