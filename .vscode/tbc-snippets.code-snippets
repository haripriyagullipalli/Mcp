{
  "TBC Controller Template": {
    "scope": "csharp",
    "prefix": "tbccontroller",
    "body": [
      "/// <summary>",
      "/// ${1:Description} operations following TBC standards",
      "/// </summary>",
      "[ApiController]",
      "[Route(\"api/v1/${2:resource}\")]",
      "[Authorize]",
      "[ProducesResponseType(typeof(ErrorResponseDto), StatusCodes.Status401Unauthorized)]",
      "[ProducesResponseType(typeof(ErrorResponseDto), StatusCodes.Status500InternalServerError)]",
      "public class ${3:Resource}Controller : ControllerBase",
      "{",
      "    private readonly ILogger<${3:Resource}Controller> _logger;",
      "    private readonly IMediator _mediator;",
      "    private readonly string _correlationId;",
      "",
      "    public ${3:Resource}Controller(",
      "        ILogger<${3:Resource}Controller> logger,",
      "        IMediator mediator,",
      "        IHttpContextAccessor httpContextAccessor)",
      "    {",
      "        _logger = logger ?? throw new ArgumentNullException(nameof(logger));",
      "        _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));",
      "        _correlationId = httpContextAccessor.HttpContext?.TraceIdentifier ?? Guid.NewGuid().ToString();",
      "    }",
      "",
      "    $0",
      "}"
    ],
    "description": "TBC-compliant controller with full Clean Architecture setup"
  },

  "TBC GET Endpoint": {
    "scope": "csharp", 
    "prefix": "tbcget",
    "body": [
      "[HttpGet(\"${1:endpoint}\")]",
      "[ProducesResponseType(typeof(${2:ResponseType}), StatusCodes.Status200OK)]",
      "[ProducesResponseType(typeof(ErrorResponseDto), StatusCodes.Status404NotFound)]",
      "public async Task<IActionResult> ${3:MethodName}Async(",
      "    ${4:parameters},",
      "    CancellationToken cancellationToken = default)",
      "{",
      "    using var scope = _logger.BeginScope(new Dictionary<string, object>",
      "    {",
      "        [\"CorrelationId\"] = _correlationId,",
      "        [\"Operation\"] = nameof(${3:MethodName}Async)",
      "    });",
      "",
      "    try",
      "    {",
      "        _logger.LogInformation(\"${5:Operation description} {Parameter}\", ${6:parameter});",
      "",
      "        var query = new ${7:QueryName}(${8:parameters});", 
      "        var result = await _mediator.Send(query, cancellationToken);",
      "",
      "        if (result == null)",
      "        {",
      "            _logger.LogWarning(\"${9:Resource} not found\");",
      "            return NotFound(new ErrorResponseDto",
      "            {",
      "                Code = \"${10:ERROR_CODE}\",",
      "                Message = \"${11:Error message}\",",
      "                CorrelationId = _correlationId",
      "            });",
      "        }",
      "",
      "        return Ok(result);", 
      "    }",
      "    catch (Exception ex)",
      "    {",
      "        _logger.LogError(ex, \"Error ${12:operation}\");",
      "        return StatusCode(StatusCodes.Status500InternalServerError, new ErrorResponseDto",
      "        {",
      "            Code = \"INTERNAL_ERROR\",",
      "            Message = \"An unexpected error occurred\",",
      "            CorrelationId = _correlationId",
      "        });",
      "    }",
      "}"
    ],
    "description": "TBC-compliant GET endpoint with comprehensive error handling"
  },

  "TBC POST Endpoint": {
    "scope": "csharp",
    "prefix": "tbcpost", 
    "body": [
      "[HttpPost(\"${1:endpoint}\")]",
      "[ProducesResponseType(typeof(${2:ResponseType}), StatusCodes.Status201Created)]",
      "[ProducesResponseType(typeof(ErrorResponseDto), StatusCodes.Status400BadRequest)]",
      "public async Task<IActionResult> ${3:MethodName}Async(",
      "    [FromBody] ${4:RequestType} request,",
      "    CancellationToken cancellationToken = default)", 
      "{",
      "    using var scope = _logger.BeginScope(new Dictionary<string, object>",
      "    {",
      "        [\"CorrelationId\"] = _correlationId,",
      "        [\"Operation\"] = nameof(${3:MethodName}Async)",
      "    });",
      "",
      "    try",
      "    {",
      "        _logger.LogInformation(\"${5:Creating resource} with correlation {CorrelationId}\", _correlationId);",
      "",
      "        var command = new ${6:CommandName}(request);",
      "        var result = await _mediator.Send(command, cancellationToken);",
      "",
      "        _logger.LogInformation(\"Successfully created ${7:resource} {Id}\", result.Id);",
      "        return CreatedAtAction(nameof(${8:GetMethodName}Async), new { id = result.Id }, result);",
      "    }",
      "    catch (ValidationException ex)",
      "    {", 
      "        _logger.LogWarning(\"Validation error creating ${9:resource}: {ValidationError}\", ex.Message);",
      "        return BadRequest(new ErrorResponseDto",
      "        {",
      "            Code = \"VALIDATION_ERROR\",",
      "            Message = ex.Message,",
      "            CorrelationId = _correlationId",
      "        });",
      "    }",
      "    catch (Exception ex)",
      "    {",
      "        _logger.LogError(ex, \"Error creating ${10:resource}\");", 
      "        return StatusCode(StatusCodes.Status500InternalServerError, new ErrorResponseDto",
      "        {",
      "            Code = \"INTERNAL_ERROR\",",
      "            Message = \"An unexpected error occurred\",",
      "            CorrelationId = _correlationId",
      "        });",
      "    }",
      "}"
    ],
    "description": "TBC-compliant POST endpoint with validation and error handling"
  }
}